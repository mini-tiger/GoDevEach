package main

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"gitee.com/taojun319/tjtools/db/oracle"
	"gitee.com/taojun319/tjtools/file"
	logDiy "gitee.com/taojun319/tjtools/logDiyNew"
	"gitee.com/taojun319/tjtools/utils"
	"github.com/PuerkitoBio/goquery"
	"github.com/ccpaging/nxlog4go"
	_ "github.com/mattn/go-oci8"
	"haifei/syncHtml/g"
	"log"
	"net/http"
	_ "net/http/pprof"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"
)

//https://github.com/360EntSecGroup-Skylar/excelize
// 中文 https://xuri.me/excelize/zh-hans/
// https://godoc.org/github.com/360EntSecGroup-Skylar/excelize#File.GetSheetName

const (
	//ReadFile    = "10.155.2.4_yuebao_English.html"
	//htmlfileReg = "C:\\work\\go-dev\\src\\godev\\works\\haifei\\*.html"
	//htmlBakDir  = "C:\\work\\go-dev\\src\\godev\\works\\haifei\\bak\\"
	//timeinter   = 10
	timeLayout = "2006-01-02 15:04:05"
	FieldsLen  = 21 // 列一共有几列,使用时 要 减一
	ConfigJson = "/home/go/GoDevEach/works/haifei/syncHtml/synchtml.json"
	//ConfigJson = "D:\\work\\project-dev\\GoDevEach\\works\\haifei\\syncHtml\\synchtml.json"
	DetailTableName = "HF_BACKUPDETAIL"
)

var NeedFields []string = []string{"DATACLIENT", "AgentInstance", "BackupSetSubclient", "Job ID (CommCell)(Status)",
	"Type", "Scan Type", "Start Time(Write Start Time)", "End Time or Current Phase", "Size of Application"}

var MoveBakFileChan chan string = make(chan string, 0)
var MoveFailFileChan chan string = make(chan string, 0)

var startRunTime = time.Now().Unix()
var (
	CommCell        string // 客户端名
	GenTime         string
	StartTime       string
	ApplicationSize string
	Subclient       string
	//StartTimeArr    []string = make([]string, 0)
)

var Log *nxlog4go.Logger
var c Config

type HtmlFusion struct {
	HtmlFileAbs    string              // 文件名绝对路径
	NewHtmlFileAbs string              //备份文件名绝对路径
	Cv             int                 //文件版本
	ResultLog      string              //错误提示字符串
	Fail           bool                // 是否成功，流程是否往下进行
	FusionSqlArrs  []map[string]string //字段和数据的MAP
	SqlArrs        []map[string]string //SQL语句MAP，分插入和更新
	ChineseFile    bool
	//DetailSqlArr  [](*map[string]string)
	//FiledsHeader []string
	InsertSuccess int // 插入和更新 成功多少条
	UpdateSuccess int
	CommCell      string
	GenTime       string
	TableName     string
	TbodyDataNum  int // 数据在goquery 的位置
}

type Config struct {
	HtmlfileReg string `json:"htmlfileReg"`
	HtmlBakDir  string `json:"htmlBakDir"`
	HtmlFailDir string `json:"htmlFailDir"`
	Logfile     string `json:"logfile"`
	LogMaxDays  int    `json:"logMaxDays"`
	Timeinter   int    `json:"timeinter"`
	OracleDsn   string `json:"oracledsn"`
}

func CheckConfig(fp string) (e error, conf string) {
	if file.IsExist(ConfigJson) {
		return nil, ConfigJson
	} else {
		dir, _ := filepath.Abs(filepath.Dir(os.Args[0]))
		if file.IsExist(filepath.Join(dir, fp)) {
			return nil, filepath.Join(dir, fp)
		} else {
			return errors.New(fmt.Sprintf("confile :%s Not Found", fp)), ""
		}
	}

}

func readconfig(cfgfile string) {
	cfgstr := g.ParseConfig(cfgfile)
	err := json.Unmarshal([]byte(cfgstr), &c)
	if err != nil {
		log.Fatalln("parse config file fail:", err)
	}
}

func main() {

	e, confile := CheckConfig("synchtml.json") // xxx 更改配置文件使用上面const
	if e == nil {
		readconfig(confile)
	} else {
		log.Fatalln("config file fail:", e)
	}

	// 初始化 日志
	Log = logDiy.InitLog1(c.Logfile, c.LogMaxDays, true, "INFO")
	//Log = g.InitLog(c.Logfile,c.LogMaxDays)
	//Log = logDiy.Logger()

	// 打印配置
	Log.Info("读取配置: %+v\n", c)

	go func() {
		Log.Info(http.ListenAndServe("0.0.0.0:7777", nil))
	}()

	go waitMoveFile()

	dir, err := filepath.Abs(filepath.Dir(c.HtmlfileReg))
	if err != nil || !file.IsExist(dir) {
		Log.Fatalln("HTMLFile Dir 不存在")
	}
	//var filesPointer *[]string
	for {
		if oracle.CheckOracleConn(c.OracleDsn) != nil {
			Log.Error("oracle 连接失败,wait %d 秒后,重试\n", c.Timeinter)
			time.Sleep(time.Duration(c.Timeinter) * time.Second)
			continue
		}

		loopStartTime := time.Now()

		//files = files[0:0] // 每次清空 files,不改变内存地址

		files, err := file.GetFileList(c.HtmlfileReg) // 遍历目录 包括子目录

		if err != nil {
			Log.Fatalln("HTMLFile Dir Error:", err)
		}

		//fmt.Println(files) // contains a list of all files in the current directory
		d, h, m, s := utils.GetTime(time.Now().Unix() - startRunTime)
		Log.Info("本次读取到 %d个文件\n", len(*files))
		Log.Info("开始运行时间 %s,已经运行%d天%d小时%d分钟%d秒\n", time.Unix(startRunTime, 0).Format(timeLayout), d, h, m, s)
		if len(*files) >= 1 {
			waitHtmlFile(files)
		}
		Log.Warn("本次处理 %d个文件,共用时 %.4f 秒\n", len(*files), time.Now().Sub(loopStartTime).Seconds())
		//runtime.GC()
		//debug.FreeOSMemory()
		time.Sleep(time.Duration(c.Timeinter) * time.Second)
	}
}

func NewDateFileName(oldfileAbs string, bakdir string) string {

	filename := filepath.Base(oldfileAbs)
	ext := filepath.Ext(oldfileAbs)

	filenameOnly := strings.TrimSuffix(filename, ext)
	//fmt.Println(oldfileAbs)
	//fmt.Println(filepath.Join(bakdir,fmt.Sprintf("%s_%s%s",filenameOnly,time.Now().Format("2006-01-02"),ext)))

	return filepath.Join(bakdir, fmt.Sprintf("%s_%d%s", filenameOnly, time.Now().UnixNano(), ext))
	// 同一天的目录中有 相同文件名， 文件名中加入 日期
	// /home/go/GoDevEach/works/haifei/syncHtml/htmlData/1monthReport/cv10/cv10-bj1/14day_4copy.html
	// /home/go/GoDevEach/works/haifei/syncHtml/htmlData/HisData/bak/2019-11-08/14day_4copy_2019-11-08.html

}

func MoveFile(oldfile string, dir string) {

	bakDir := filepath.Join(dir, time.Now().Format("2006-01-02"))
	err := os.MkdirAll(bakDir, 0777)
	if err != nil {
		Log.Error("mkdir Error DIR: %s, err:%s", bakDir, err)
	}

	//fmt.Printf("fileBak:%s\n", filepath.Join(bakDir, path.Base(oldfile)))
	//fmt.Println("fileBak:", filepath.Join(bakDir, filepath.Base(oldfile)), file.IsExist(filepath.Join(bakDir, filepath.Base(oldfile))))

	if file.IsExist(filepath.Join(bakDir, filepath.Base(oldfile))) { // 备份文件夹中是否存在相同名字要 备份的文件
		//fmt.Println("dddddddd")
		NewName := NewDateFileName(oldfile, bakDir)
		//fmt.Println("dddddddddddd",NewName)
		//err := os.Rename(oldfile, NewName)
		if err != nil {
			Log.Error("osRename html File Error DIR: %s, err:%s\n", bakDir, err)
		} else {
			Log.Info("move file old:%s,new:%s\n", oldfile, NewName)
		}
	} else {
		_, fileName := filepath.Split(oldfile)
		Log.Info("move file old:%s,new:%s\n", oldfile, filepath.Join(bakDir, fileName))
		//err = os.Rename(oldfile, filepath.Join(bakDir, fileName))
		if err != nil {
			Log.Error("osRename html File Error DIR: %s, err:%s\n", bakDir, err)
		}
	}

}

func waitMoveFile() {

	for {
		select {
		case f, ok := <-MoveBakFileChan:
			if ok {
				go MoveFile(f, c.HtmlBakDir)
			} else {
				break
			}
		case f, ok := <-MoveFailFileChan:
			if ok {
				go MoveFile(f, c.HtmlFailDir)
			} else {
				break
			}
		}
	}
}

func waitHtmlFile(files *[]string) {

	HtmlWheel := &HtmlFusion{}
	for _, file := range *files {
		Log.Info("begin covert file:%s\n", file)
		//fmt.Println(string(file[len(file)-4:]))
		if strings.ToUpper(file[len(file)-4:]) != "HTML" { // 初始化文件 结构体
			Log.Error("file :%s, ExtName not html\n", file)
			//time.Sleep(time.Duration(3 * time.Second))
			MoveFailFileChan <- file
			continue
		}

		*HtmlWheel = InitReadHtml(file)
		if !HtmlWheel.Fail {
			HtmlWheel.TableName = DetailTableName
			//fmt.Printf("%+v\n",HtmlWheel)
			HtmlWheel.GenSqls()
			HtmlWheel.stmtSql()
			// todo HTML中重复数据，可以通过 去除 更新SQL中的 HTMLFILE，INSERTTIME 两个字段进行 重复插入
			// todo 如果只使用 INERRTTIME  updateSql 基本没有作用
			HtmlWheel.ResultLogMoveFile()
		} else {
			HtmlWheel.ResultLogMoveFile()
		}

		//fmt.Println(len(*HtmlWheel.SqlArrs))
		//fmt.Println(HtmlWheel.InsertSuccess,HtmlWheel.UpdateSuccess)
		//fmt.Println(len(*HtmlWheel.FusionSqlArrs))
		// xxx 清除变量struct，释放memory
		HtmlWheel = &HtmlFusion{}

	}

}

func (h *HtmlFusion) ResultLogMoveFile() {
	//file := h.HtmlFileAbs
	if h.Fail {
		MoveFailFileChan <- h.HtmlFileAbs
		Log.Error(h.ResultLog)
	} else {
		//Log.Info("finish covert file:%s\n", h.HtmlFileAbs)
		MoveBakFileChan <- h.HtmlFileAbs
		Log.Info("HtmFile:%s, version:%d,totalRows:%d,InsertSuccess:%d,UpdateSuccess:%d,len(FusionMapSum):%d,CommCell:%s,GenTime:%s\n",
			filepath.Base(h.HtmlFileAbs),
			h.Cv,
			len(h.SqlArrs),
			h.InsertSuccess,
			h.UpdateSuccess,
			len(h.FusionSqlArrs),
			h.CommCell, h.GenTime)

		if h.UpdateSuccess > 0 {
			Log.Warn("!!!!!!!!!HtmlFile:%s, update gt 0\n", h.HtmlFileAbs)
		}


	}
	//switch h.ResultNum {
	//case 1:
	//	Log.Error("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "col not enough")
	//	time.Sleep(time.Duration(3 * time.Second))
	//
	//	break
	//case 2:
	//	Log.Error("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "col not English")
	//
	//	break
	//case 3:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "sql Gen err,sqlarr len is 0")
	//
	//	break
	//case 4:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "insert or update have err")
	//	time.Sleep(time.Duration(3 * time.Second))
	//
	//	break
	//case 5:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "NeedField not enough")
	//	time.Sleep(time.Duration(3 * time.Second))
	//
	//	break
	//case 6:
	//	Log.Error("htmlFile %s\n", file)
	//	time.Sleep(time.Duration(3 * time.Second))
	//
	//	break
	//case 7:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "不正确的中文格式")
	//
	//	break
	//case 8:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "中文线程中是英文HTML File")
	//
	//	break
	//case 9:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "中文列与定义好的版本列数不同")
	//
	//	break
	//case 10:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "中文文件出错")
	//
	//	break
	//
	//default:
	//	Log.Info("finish covert file:%s\n", h.HtmlFileAbs)
	//}

}

func formatFields(index int, s *string, cv int) (*string) {
	rstr := ""
	switch true {
	case index == 0 && strings.Contains(*s, "Client"):
		rstr = "DATACLIENT"
		break
	case strings.Contains(*s, "Phase(Write End Time)"):

		rstr = strings.Replace(*s, "(Write End Time)", "", -1)

		break
	case index == 7 && cv == 101:

		rstr = "End Time or Current Phase" // cv 101
		break

	case index == 10 && cv == 101:
		rstr = "Data Written"
		break

	case strings.Contains(*s, "(Compression") && strings.Contains(*s, "Rate)"):
		//rstr = strings.Replace(s, " (Compression Rate)", "", -1)
		rstr = "Size of Application"
		break
	case strings.Contains(*s, "Data Transferred"):
		//rstr = strings.Replace(s, " (Compression Rate)", "", -1)
		rstr = "Data Transferred"
		break
	case strings.Contains(*s, "(Space Saving Percentage)"):
		rstr = strings.Replace(*s, "(Space Saving Percentage)", "", -1)
		break

	case strings.Contains(*s, "(Current)"):
		rstr = strings.Replace(*s, "(Current)", "", -1)
		break
	case *s == "Agent /Instance":
		rstr = "AgentInstance"
		break
	case *s == "Backup Set /Subclient":
		rstr = "BackupSetSubclient"
		break

	default:
		rstr = strings.TrimSpace(*s)
	}
	//fmt.Println(rstr)
	rstr = strings.TrimSpace(rstr)
	rstr = strings.Replace(rstr, "\n", "", -1)

	return &rstr
}

func (h *HtmlFusion) formatTime(toBeCharge string) string {
	//toBeCharge := "09/04/2019 11:03:16"
	timeLayout := "01/02/2006 15:04:05" // 	月/日/年
	if h.ChineseFile {
		timeLayout = "2006/01/02 15:04:05"
	}
	//转化所需模板
	loc, _ := time.LoadLocation("Local")                            //重要：获取时区
	theTime, _ := time.ParseInLocation(timeLayout, toBeCharge, loc) //使用模板在对应时区转化为time.time类型
	sr := theTime.Unix()                                            //转化为时间戳 类型是int64
	// xxx 如果时间不对，可能是时间排列顺序的问题
	if sr < 0 {
		timeLayout = "02/01/2006 15:04:05"                             // 	月/日/年
		theTime, _ = time.ParseInLocation(timeLayout, toBeCharge, loc) //使用模板在对应时区转化为time.time类型
		sr = theTime.Unix()
	}
	return strconv.FormatInt(sr, 10)
}

func split(s *string, maxLen int) (*string) {
	if len(*s) > maxLen && (*s) != "NULL" {
		(*s) = (*s)[0 : maxLen-153]
		return s
	} else {
		return s
	}

}

func rebuildstr(s *string) (*string) {
	rstr := ""
	if strings.Contains(*s, "N/A") {
		rstr = strings.Replace(*s, "N/A", "", -1)
		s = &rstr
	} else {
		rstr = *s
	}
	if strings.Contains(*s, "%") {
		rstr = strings.Replace(*s, "%", "%%", -1)
		s = &rstr
	} else {
		rstr = *s
	}

	rstr = strings.ReplaceAll(*s, "'", "")
	//if len(rstr) > 4000 {
	//	rstr = rstr[0:3947]
	//}

	return &rstr
}

func (h *HtmlFusion) formatValues(index int, s *string) (*string) {
	//fmt.Println(index, s)
	rstr := rebuildstr(s)
	//if strings.Contains(*s, "N/A") {
	//	rstr = strings.Replace(*s, "N/A", "", -1)
	//	s = &rstr
	//} else {
	//	rstr = *s
	//}
	//if strings.Contains(*s, "%") {
	//	rstr = strings.Replace(*s, "%", "%%", -1)
	//	s = &rstr
	//} else {
	//	rstr = *s
	//}

	switch true {
	//case strings.Contains(s, "N/A"):
	//	rstr = strings.Replace(s, "N/A", "", -1)
	//	s = rstr
	case index == 2: // subclient

		//tmpstr := s
		//fmt.Println(tmpstr)
		//fmt.Println(strings.Contains(tmpstr,"/"),strings.Split(s, "/")[1])
		switch true {
		case strings.Contains(*s, "/"):

			//if strings.Contains(*s, "N/A/") {
			//	*s = strings.ReplaceAll(*s, "N/A/", "")
			//} else {
			//	*s = strings.Split(*s, "/")[1]
			//}
			//
			//if *s == "" {
			//	var reg = regexp.MustCompile("/.*")
			//	match := reg.FindString(*s)
			//	*s = match
			//}
			//xxx 取最后一个 /后面 的所有字符
			*s = (*s)[strings.LastIndex(*s, "/")+1:]
			//
			////fallthrough
			if strings.Contains(*s, "Logcommand line") {
				Subclient = "Logcommand line"
				break
			}

			if strings.Contains(*s, "command line") ||
				(strings.Contains(*s, "command") && strings.Contains(*s, "line")) {
				Subclient = "command line"
				break
			}

			Subclient = *s

			break
		default:
			Subclient = *s

		}

		break

	case index == 3: // jobid
		r := strings.ReplaceAll(strings.ReplaceAll(*s, "\n", ""), " ", "")
		return &r

	case index == 6: // starttime 赋值 全局变量，对应自定义列
		StartTimeValue := ""
		if strings.Contains(*s, "(") {
			StartTimeValue = strings.Split(*s, "(")[0]
		} else {
			StartTimeValue = *s
		}

		StartTimeValue = strings.TrimSpace(StartTimeValue)
		//StartTimeValue = fmt.Sprint("to_date('" + StartTimeValue + "','mm/dd/yyyy hh24:mi:ss')")
		StartTimeValue = h.formatTime(StartTimeValue)
		//StartTimeArr = append(StartTimeArr, fmt.Sprintf("%s000", StartTimeValue))
		StartTime = fmt.Sprintf("%s000", StartTimeValue)

		//StartTime = fmt.Sprintf("to date(%s mm/dd/yyyy hh24:mi:ss)",StartTime)
		//StartTime = "2019-08-12 04:00:00"
		break
	case index == 8:
		as := ""
		if strings.Contains(*s, "(") {
			as = strings.Split(*s, "(")[0]
		} else {
			as = *s
		}

		switch true {
		case strings.Contains(as, "TB"):
			as = strings.Split(as, " TB")[0]
			fl, err := strconv.ParseFloat(as, 64)
			if err != nil {
				Log.Error("应用程序大小转换float失败 err:%s\n", err)
				break
			}

			//am:=strconv.FormatFloat(fl*1024,'E',-1,64)
			ApplicationSize = fmt.Sprintf("%.2f", fl*1024*1024)
		case strings.Contains(as, "GB"):
			as = strings.Split(as, " GB")[0]
			fl, err := strconv.ParseFloat(as, 64)
			if err != nil {
				Log.Error("应用程序大小转换float失败 err:%s\n", err)
				break
			}

			//am:=strconv.FormatFloat(fl*1024,'E',-1,64)
			ApplicationSize = fmt.Sprintf("%.2f", fl*1024)

		case strings.Contains(as, "MB"):
			as = strings.Split(as, " MB")[0]
			fl, err := strconv.ParseFloat(as, 64)
			if err != nil {
				Log.Error("应用程序大小转换float失败 err:%s\n", err)
				break
			}
			ApplicationSize = fmt.Sprintf("%.2f", fl)
		case strings.Contains(as, "KB"):
			as = strings.Split(as, " KB")[0]
			fl, err := strconv.ParseFloat(as, 64)
			if err != nil {
				Log.Error("应用程序大小转换float失败 err:%s\n", err)
				break
			}
			ApplicationSize = fmt.Sprintf("%.2f", fl/1024)
		case strings.Contains(as, "Bytes"):
			as = strings.Split(as, " Bytes")[0]
			fl, err := strconv.ParseFloat(as, 64)
			if err != nil {
				Log.Error("应用程序大小转换float失败 err:%s\n", err)
				break
			}
			ApplicationSize = fmt.Sprintf("%.2f", fl/1024/1024)
		case strings.Contains(as, "Not Run because of another job running for the same subclient"):
			break
		default:
			p := `(\d+)\.(\d+)`
			floatNum, _ := regexp.MatchString(p, as)
			//fmt.Println(i,err)
			p = `(\d+)`
			intNum, _ := regexp.MatchString(p, as)
			if floatNum || intNum {
				ApplicationSize = as
				break
			}

			application, e := strconv.Atoi(strings.TrimSpace(as))
			if e != nil {
				Log.Error("change type string:%s,err:%s\n", as, e)
			}
			if application == 0 {
				ApplicationSize = "0"
			}

		}

		break
	}
	return rstr
}

func InitReadHtml(htmlfile string) (htmlwheel HtmlFusion) {

	//var htmlwheel HtmlFusion
	//defer func() {
	//	if err := recover(); err != nil {
	//		logstr := fmt.Sprintf("htmlfile:%s, err:%s\n", htmlfile, err)
	//		//Log.Error(logstr)
	//		htmlwheel.ResultLog = logstr
	//		htmlwheel.Fail = true
	//	}
	//}()

	htmlwheel.Fail = false
	htmlwheel.HtmlFileAbs = htmlfile
	htmlwheel.Cv = 11
	htmlwheel.ChineseFile = false

	//Data := make([][]string, 0)
	//FiledsHeader := new([]string) // 列头，序号为KEY
	//cv := 0

	f, err := os.OpenFile(htmlfile, os.O_RDONLY, 0755)
	if err != nil {
		//Log.Error("file open err:%s\n", err)
		htmlwheel.ResultLog = fmt.Sprintf("file open err:%s\n", err)
		htmlwheel.Fail = true
		return
	}
	defer func() {
		f.Close()
	}()

	dom, err := goquery.NewDocumentFromReader(f)
	if err != nil {
		//log.Fatal(err)
		//Log.Error("dom err:%s\n", err)
		htmlwheel.ResultLog = fmt.Sprintf("dom err:%s", err)
		htmlwheel.Fail = true
		return
	}
	defer func() {
		dom.Empty()
	}()

	zhStr := dom.Find("body:contains(报)")

	//fmt.Println(htmlfile, "zh:", zhStr.Length())
	if zhStr.Length() >= 1 {
		//Log.Info("Html:%s ; 进入中文处理线程\n", htmlfile)
		htmlwheel.ChineseFile = true
		// xxx 不处理中文文件
		ResultLog := fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlwheel.HtmlFileAbs, "文件是中文格式")
		htmlwheel.Fail = true
		htmlwheel.ResultLog = ResultLog
	}

	OtherChiSele1 := dom.Find("body:contains(存储策略拷贝中的作业报告)") // 不正常
	OtherChiSele2 := dom.Find("body:contains(未找到符合选定条件的数据)") // 不正常
	if OtherChiSele1.Size() >= 1 || OtherChiSele2.Size() >= 1 {
		ResultLog := fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlwheel.HtmlFileAbs, "不正确的中文格式")
		htmlwheel.Fail = true
		htmlwheel.ResultLog = ResultLog
		return
	}

	CommCells := dom.Find("body:contains(CommCell)")

	CommCells.Each(func(i int, selection *goquery.Selection) {
		if i == 0 {
			//fmt.Printf("CommCell :%+v\n", selection.Text())
			ss := strings.Split(strings.Split(selection.Text(), "CommCell:")[1], "--")[0]
			//fmt.Printf("CommCell :%+v\n", ss)
			CommCell = strings.TrimSpace(ss)
			htmlwheel.CommCell = CommCell
		}

	})

	t_tbodyHeader := dom.Find("body > table:nth-child(13) > tbody > tr:nth-child(1) > td")
	htmlwheel.TbodyDataNum = 13

	if len(t_tbodyHeader.Nodes) == 0 {
		htmlwheel.Cv = 101 // 版本是10,HTML结构不同,列头一样
		// 特殊的CV10
		//t_tbodyHeader = dom.Find("body > table > tbody:nth-child(1) > tr:nth-child(1) > td[bgcolor='#cccccc']"  )
		t_tbodyHeader = dom.Find("body > table:nth-child(19) > tbody > tr:nth-child(1) > td")
		htmlwheel.TbodyDataNum = 19
	}

	//cv8 := false
	//有两种格式的HTML ,代表是CV8
	if len(t_tbodyHeader.Nodes) == 0 {
		htmlwheel.Cv = 8
		t_tbodyHeader = dom.Find("body > table:nth-child(12) > tbody > tr:nth-child(1) > td")
		htmlwheel.TbodyDataNum = 12
	}

	// xxx 如果前面都没有列头，goquery前22个元素 找到列头的位置
	if len(t_tbodyHeader.Nodes) == 0 {
		for i := 0; i <= 22; i++ {
			t_tbodyHeader = dom.Find("body > table:nth-child(" + strconv.Itoa(i) + ") > tbody > tr:nth-child(1) > td")
			//fmt.Printf("%d,%d\n", i, len(t_tbodyHeader.Nodes))\
			if len(t_tbodyHeader.Nodes) > 9 { // xxx 找到一个至少有9列的行
				htmlwheel.TbodyDataNum = i
				htmlwheel.Cv = 100
				break
			}
		}
	}

	if len(t_tbodyHeader.Nodes) == 0 {
		ResultLog := fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlwheel.HtmlFileAbs, "前22个元素，没有找到有效列头的表格")
		htmlwheel.Fail = true
		htmlwheel.ResultLog = ResultLog
		return

	}

	FiledsHeader := make([]string, 17) // 列头，序号为KEY
	// 循环找出列头
	t_tbodyHeader.Each(func(i int, s *goquery.Selection) {
		sa := s.Text()
		sa = *(formatFields(i, &sa, htmlwheel.Cv)) // todo 格式化 列头
		//*FiledsHeader = append(*FiledsHeader, sa)
		FiledsHeader[i] = sa
	})
	//fmt.Println(FiledsHeader)
	// 如果是CV8版本，手动修改列名, 删除 size of Backup cols 这列
	switch htmlwheel.Cv {
	case 8:
		//tmp := make([]string, 16)
		//copy(tmp, FiledsHeader)
		index := 9 // xxx cv8需要删除第9列
		FiledsHeader = append(FiledsHeader[0:index], FiledsHeader[index+1:]...)
		//FiledsHeader = tmp[0:9]
		//fmt.Println(*FiledsHeader)
		//*FiledsHeader = append(*FiledsHeader, []string{"Data Transferred", "Data Written"}...)
		//fmt.Println(*FiledsHeader)
		//FiledsHeader = append(*FiledsHeader, tmp[10:]...)
		//fmt.Println(*FiledsHeader)
		FiledsHeader[3] = "Job ID (CommCell)(Status)"

		//GenTime = strings.TrimSpace(strings.Split(GenTime,"CommCell")[0])
		break
	case 101:
		break
	default:
		break
	}
	//fmt.Println(FiledsHeader)
	//if cv8 {

	//}
	//fmt.Println("222222222",*FiledsHeader)
	//for i := 0; i < len(*FiledsHeader); i++ {
	//	fmt.Printf("%d, value:%s\n", i, (*FiledsHeader)[i])
	//}

	//fmt.Printf("%+v\n", *FiledsHeader)
	switch true {
	case len(FiledsHeader) < FieldsLen-6: // col not enough,运维报告中不用判断
		//fmt.Println(FiledsHeader)
		//fmt.Println(len(*FiledsHeader))
		htmlwheel.Fail = true

		htmlwheel.ResultLog = fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlfile, "col not enough")

		return
		//case (*FiledsHeader)[0] != "DATACLIENT": // col not English
		//
		//	htmlwheel.ResultLog = fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlfile, "col not English")
		//	htmlwheel.Fail = true
		//	return
	}

	var GenTimeSource *goquery.Selection
	// 生成的时间
	if htmlwheel.ChineseFile {
		GenTimeSource = dom.Find("body:contains(备份作业)") // 正常
	} else {
		GenTimeSource = dom.Find("body:contains(on)")
	}

	//fmt.Printf("%+v\n", htmlwheel)

	GenTimeSource.Each(func(i int, selection *goquery.Selection) {
		if i == 0 {
			//fmt.Println(htmlfile,selection.Text())
			//fmt.Println(strings.Contains(selection.Text(),"generated"))
			var ss string
			//if htmlwheel.Cv != 8 {
			//	ss = strings.Split(strings.Split(selection.Text(), "generated on")[1], "Version")[0]
			//} else {
			//	ss = strings.Split(strings.Split(selection.Text(), "generated on")[1], "CommCell ID:")[0]
			//}
			//fmt.Println( strings.Split(strings.Split(selection.Text(), "备份作业摘要报告")[1], "上")[0])
			switch true {
			case htmlwheel.Cv == 8 && !htmlwheel.ChineseFile: //cv8 英文
				ss = strings.Split(strings.Split(selection.Text(), "generated on")[1], "CommCell ID:")[0]
				break
			case htmlwheel.ChineseFile && htmlwheel.Cv != 8: //除cv8 中文

				ss = strings.Split(strings.Split(selection.Text(), "备份作业摘要报告")[1], "上")[0]
				ss = strings.Split(ss, "\n")[1]
				//one := strings.Split(ss, "\n")[0]
				//two := strings.Split(ss, "\n")[1]
				//fmt.Println(one,two)
				//fmt.Println(one[len(one)-4:] + two)
				//if strings.Contains(ss, "\n") {
				//	ss = strings.Split(ss, "\n")[1]
				//}
				break

			case htmlwheel.ChineseFile && htmlwheel.Cv == 8: //cv8 中文

				ss = strings.Split(strings.Split(selection.Text(), "生成于")[1], "CommCell")[0]
				//fmt.Println(strings.Split(strings.Split(selection.Text(), "生成于")[1], "CommCell")[0])
				//if strings.Contains(ss, "\n") {
				//	ss = strings.Split(ss, "\n")[1]
				//}
				break
			default:
				ss = strings.Split(strings.Split(selection.Text(), "generated on")[1], "Version")[0]
			}
			//GenTime = formatStr(ss)
			//fmt.Println(htmlwheel.Cv)
			//fmt.Println(ss)
			//fmt.Printf("GenTime :%+v\n", ss)
			//fmt.Println(htmlwheel.Cv)
			GenTime = strings.Replace(strings.TrimSpace(ss), "\n", "", -1)
			htmlwheel.GenTime = GenTime
		}
	})

	//fmt.Println(CommCell)
	//fmt.Println(GenTime)
	//fmt.Println(*FiledsHeader)
	// 与 定义好的 9列进行比对， 这9列必须存在
	//fmt.Println(htmlwheel)
	if !htmlwheel.ChineseFile { // 中文文件不比对
		for i := 0; i < len(NeedFields); i++ {
			//fmt.Println((*FiledsHeader)[i])
			if NeedFields[i] != (FiledsHeader)[i] {
				if !strings.Contains((FiledsHeader)[i], NeedFields[i]) { // 包含关键字即可
					//fmt.Printf("%+v\n", NeedFields[i])
					htmlwheel.ResultLog = fmt.Sprintf("htmlFile %s, ERR:%s\n", htmlfile, "NeedField not enough")
					htmlwheel.Fail = true
					return
				}

			}
		}
	}

	//添加自定义列
	//*FiledsHeader = append(*FiledsHeader, []string{"HTMLFILE", "INSERTTIME", "COMMCELL", "APPLICATIONSIZE", "DATASUBCLIENT", "START TIME"}...)

	var t_tbodyData *goquery.Selection
	var DetailFields map[int]string //这里与表格数据进行组合生成

	t_tbodyData = dom.Find("body > table:nth-child(" + strconv.Itoa(htmlwheel.TbodyDataNum) + ") > tbody > tr ")
	switch htmlwheel.Cv {
	case 8:
		//t_tbodyData = dom.Find("body > table:nth-child("+strconv.Itoa(htmlwheel.TbodyDataNum)+") > tbody > tr")
		DetailFields = g.DetailFieldsMapCv8
		break
	case 101:
		//t_tbodyData = dom.Find("body > table:nth-child("+strconv.Itoa(htmlwheel.TbodyDataNum)+") > tbody > tr")
		DetailFields = g.DetailFieldsMap
		break
	case 11:
		DetailFields = g.DetailFieldsMap
		break
	case 100: // xxx 自定义列头 ，先使用 默认列头
		DetailFields = g.DetailFieldsMap
		break
	default:
		//t_tbodyData = dom.Find("body > table:nth-child("+strconv.Itoa(htmlwheel.TbodyDataNum)+") > tbody > tr ")
		DetailFields = g.DetailFieldsMap
	}

	var DetailSqlArr []map[string]string
	t_tbodyData.Each(func(i int, rowsele *goquery.Selection) {
		if i == 0 { // 0行是列名
			return
		}

		tmpSubData := make(map[string]string, 25)
		var rowReasonforfailure string //行 失败原因
		var Color string = "0"         // 默认不显示颜色

		cols := rowsele.Find("td")

		if htmlwheel.Cv != 8 {
			if len(DetailFields) != len(cols.Nodes) {
				//Log.Error("htmfile:%s ,no eq rows:%d\n", htmlfile, i)
				return
			}
		} else {
			if len(DetailFields) != len(cols.Nodes)-1 { //
				//Log.Error("htmfile:%s ,no eq rows:%d\n", htmlfile, i)
				return
			}

		}

		// 先用上面判断 列数是否够
		// xxx 如果不在正常颜色中， 写入2  代表 需要颜色
		if rowColor, exists := rowsele.Attr("bgcolor"); exists {
			if _, e := g.SuccessColors[rowColor]; !e {
				Color = "2"
			}
		} else {
			Color = "2" // xxx color找不到暂时是2
		}

		cols.Each(func(colnum int, colsele *goquery.Selection) {
			if htmlwheel.Cv == 8 && colnum == 9 {
				return
			}
			ss1 := colsele.Text()
			//fmt.Println(selection.Attr("bgcolor"))
			//switch true {
			//case strings.Contains(ss1,"N/A"):
			//	ss1=strings.Replace(ss1,"N/A","",-1)
			//}

			ss1 = *(htmlwheel.formatValues(colnum, &ss1)) // todo 格式化 数据

			if len(rowsele.Next().Find(" td").Nodes) == 1 {

				//fmt.Println(i, rowsele.Next().Find(" td").Text())
				rowReasonforfailure = rowsele.Next().Find(" td").Text()

				//fmt.Println(rowReasonforfailure)
				if strings.Contains(rowReasonforfailure, "Fail") ||
					strings.Contains(rowReasonforfailure, "ER") || len(strings.TrimSpace(rowReasonforfailure)) > 5 {
					Color = "2"
				}

			} else {
				rowReasonforfailure = "NULL"
			}

			//
			//fmt.Println(strings.Split())
			tmpSubData[DetailFields[colnum]] = ss1
			//tmpSubData = append(tmpSubData, ss1)
			//fmt.Println(i,ss1)
		})
		tmpSubData[g.DetailFieldsMapPlus[17]] = CommCell
		tmpSubData[g.DetailFieldsMapPlus[18]] = StartTime
		tmpSubData[g.DetailFieldsMapPlus[19]] = Subclient
		tmpSubData[g.DetailFieldsMapPlus[20]] = ApplicationSize
		tmpSubData[g.DetailFieldsMapPlus[21]] = htmlfile
		tmpSubData[g.DetailFieldsMapPlus[22]] = strconv.FormatInt(time.Now().Unix(), 10) + "000"

		//fmt.Printf("%v,%v\n", &rowReasonforfailure, rowReasonforfailure)
		// xxx截取字符长度
		rowReasonforfailure = *(rebuildstr(&rowReasonforfailure))
		split(&rowReasonforfailure, 4000)

		//fmt.Printf("%v,%v\n", &rowReasonforfailure, rowReasonforfailure)
		//fmt.Println(Color)
		//fmt.Println(rowReasonforfailure)
		tmpSubData[g.DetailFieldsMapPlus[23]] = strings.TrimSpace(rowReasonforfailure)
		tmpSubData[g.DetailFieldsMapPlus[24]] = Color

		DetailSqlArr = append(DetailSqlArr, tmpSubData)

	})
	htmlwheel.FusionSqlArrs = DetailSqlArr
	//f.Close()
	//fmt.Println(FiledsHeader)
	//fmt.Println(Data[0])
	//fmt.Println(FiledsHeader)
	//return GenSqls(Data, FiledsHeader, htmlfile) // 这里应该包括数据库插入 ，可以是后台 go 后面
	//return 0
	//fmt.Println("!111111", len(*htmlwheel.FusionSqlArrs))
	return
}

func sliceToString(sl []string) (returnstring string) {
	sl1 := sl[0:len(sl)]
	for i := 0; i < len(sl1); i++ {
		switch true {
		case i == len(sl1)-1:
			returnstring = returnstring
			returnstring = returnstring + "\"" + sl1[i] + "\"" + ")"
			//returnstring = returnstring + "\"" + sl1[i] + "\""
			break
		case i < len(sl)-1:
			returnstring = returnstring
			returnstring = returnstring + "\"" + sl1[i] + "\"" + ","
			break
		}
	}
	return
}
func sliceToStringValue(sl map[string]string) (*string) {
	//sl1 := sl[0:len(sl)]
	var returnstring string
	var keys []string = make([]string, 0)
	for k, _ := range sl {
		keys = append(keys, k)

	}
	sort.Strings(keys)
	valueStr := ""
	colsStr := ""
	for i, v := range keys {
		if (sl)[v] == "NULL" || (sl)[v] == "" {
			continue
		}
		switch true {
		case i == len(sl)-1:
			//returnstring = returnstring
			//returnstring = returnstring + "\"" + sl1[i] + "\"" + ")"
			colsStr = colsStr + "\"" + v + "\")"
			valueStr = valueStr + "'" + (sl)[v] + "')"

			break
		case i < len(sl)-1:
			//returnstring = returnstring
			colsStr = colsStr + "\"" + v + "\"" + ","
			valueStr = valueStr + "'" + (sl)[v] + "'" + ","
			break
		}

	}
	//fmt.Println(len(keys),len(sl))
	returnstring = colsStr + " values(" + valueStr

	return &returnstring
}

//func sliceToStringValue(sl []string) (returnstring string) {
//	sl1 := sl[0:len(sl)]
//	for i := 0; i < len(sl1); i++ {
//		switch true {
//		case i == len(sl1)-1:
//			returnstring = returnstring
//			//returnstring = returnstring + "\"" + sl1[i] + "\"" + ")"
//			returnstring = returnstring + "\"" + sl1[i] + "\""
//			break
//		case i < len(sl)-1:
//			returnstring = returnstring
//			returnstring = returnstring + "\"" + sl1[i] + "\"" + ","
//			break
//		}
//	}
//	return
//}
//
//func updatesliceToString(sl []string, value []string) (returnstring string) {
//	wherestring := ""
//	//fmt.Println(len(sl),len(value))
//	if len(sl)-1 == len(value) { // header  多start time
//		for i := 0; i < len(sl); i++ {
//
//			if len(value) > i {
//				if value[i] == "" || sl[i] == "INSERTTIME" || sl[i] == "HTMLFILE" { // 空值路过
//					continue
//				}
//			}
//
//			if i == len(sl)-1 {
//				//returnstring = returnstring + "\"" + sl[i] + "\"" + "='" + value[i] + "'"
//				//wherestring = wherestring + "\"" + sl[i] + "\"" + "='" + value[i] + "'"
//				returnstring = returnstring + "\"" + sl[i] + "\"" + "=%s"
//				wherestring = wherestring + "\"" + sl[i] + "\"" + "=%s"
//			} else {
//				returnstring = returnstring + "\"" + sl[i] + "\"" + "='" + value[i] + "',"
//				wherestring = wherestring + "\"" + sl[i] + "\"" + "='" + value[i] + "' and "
//			}
//
//		}
//	}
//	returnstring = returnstring + " where " + wherestring
//	return
//}
func updatesliceToString(sl map[string]string) (*string) {

	var returnstring string
	var keys []string = make([]string, 0)
	for k, _ := range sl {
		keys = append(keys, k)

	}
	sort.Strings(keys)
	wherestring := ""
	colsStr := ""
	for i, v := range keys {

		// fixme 插入源文件与插入时间跳过
		if (sl)[v] == "NULL" || (sl)[v] == "" || v == "INSERTTIME" || v == "HTMLFILE" {
			continue
		}

		switch true {
		case i == len(sl)-1:
			//returnstring = returnstring
			//returnstring = returnstring + "\"" + sl1[i] + "\"" + ")"
			colsStr = colsStr + "\"" + v + "\"='" + (sl)[v] + "'"
			wherestring = wherestring + "\"" + v + "\"='" + (sl)[v] + "'"

			break
		case i < len(sl)-1:
			colsStr = colsStr + "\"" + v + "\"='" + (sl)[v] + "',"
			wherestring = wherestring + "\"" + v + "\"='" + (sl)[v] + "' and "
			break
		}

	}

	// fixme  wheresql只保留 COMMCELL  Jobid, 替换上面的 where
	wherestring = " 1=1 "
	for _, v := range keys {
		if v == "COMMCELL" || v == "Job ID (CommCell)(Status)" {
			wherestring = wherestring + " and \"" + v + "\"='" + (sl)[v] + "'"
		}
	}

	returnstring = colsStr + " where " + wherestring
	return &returnstring
}

//
func (h *HtmlFusion) GenSqls() {
	sqlArr := make([]map[string]string, len(h.FusionSqlArrs))
	//sqlArrs := make([]map[string]string, len(*h.FusionSqlArrs))
	//sqlArr := &sqlArrs
	defer func() {
		h.SqlArrs = sqlArr
	}()

	if h.Fail { // todo 如果之前有错误，直接返回
		return
	}

	//baseSql := "insert into HF_BACKUPDETAIL(" + sliceToString(*header) + " values("
	//updateSql := "update HF_BACKUPDETAIL set "
	//sqlArr := make([]map[string]string, 0)
	//for _, value := range Data {
	//	tmpmap := make(map[string]string, 0)
	//	//fmt.Println(index, baseSql+sliceToString(value))
	//	valueStr := strings.Replace(sliceToStringValue(value), "\"", "'", -1)
	//	//fmt.Println(valueStr)
	//	//sqlArr = append(sqlArr, baseSql+valueStr)
	//	tmpmap["insert"] = baseSql + valueStr
	//	tmpmap["update"] = updateSql + updatesliceToString(*header, value)
	//	sqlArr = append(sqlArr, tmpmap)
	//}

	baseSql := "insert into " + h.TableName + "("
	updateSql := "update " + h.TableName + " set "

	//for i := 0; i < len(*h.FusionSqlArrs); i++ {
	for i, value := range h.FusionSqlArrs {
		//value := (*h.FusionSqlArrs)[i]
		//fmt.Println(value)
		tmpmap := make(map[string]string, 2)
		//fmt.Println(index, baseSql+sliceToString(value))
		valueStr := sliceToStringValue(value)
		//fmt.Println(valueStr)
		//sqlArr = append(sqlArr, baseSql+valueStr)
		tmpmap["insert"] = baseSql + *valueStr
		tmpmap["update"] = updateSql + *updatesliceToString(value)
		sqlArr[i] = tmpmap
		//sqlArr = append(*sqlArr, tmpmap)

		//fmt.Println(tmpmap)
	}

	//fmt.Println((*sqlArr)[0]["'insert"])
	//return stmtSql(&sqlArr, htmlfile)
}

func (h *HtmlFusion) stmtSql() {
	if h.Fail {
		return
	}
	os.Setenv("NLS_LANG", "")
	//if len(os.Args) != 2 {
	//	log.Fatalln(os.Args[0] + " user/password@host:port/sid")
	//}

	db, err := sql.Open("oci8", c.OracleDsn)
	//fmt.Printf("%+v\n",db)
	if err != nil {
		log.Fatalln(err)
	}

	defer db.Close()

	updatenum := 0
	insertnum := 0
	//case 3:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "sql Gen err,sqlarr len is 0")
	//
	//	break
	//case 4:
	//	Log.Error("htmlFile %s, ERR:%s\n", file, "insert or update have err")

	sqlArr := h.SqlArrs

	if len(sqlArr) == 0 {
		logstr := fmt.Sprintf("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "sql Gen err,sqlarr len is 0")
		//Log.Fatalf(logstr)
		h.ResultLog = logstr
		h.Fail = true
		return
	}
	//ss := []string{"to_date('2019-08-25 22:11:11','yyyy-mm-dd hh24:mi:ss')"}
	for i := 0; i < len(sqlArr); i++ {
		//Log.Error("%s\n", (sqlArr)[i]["insert"])
		//fmt.Println(fmt.Sprintf(sqlArr[i]["insert"]+",%s)", StartTimeArr[i]))
		//fmt.Println(sqlArr[i]["insert"]+",:1)",StartTimeArr[i])
		//r, err := db.Exec(fmt.Sprintf("insert into HF_BACKUPDETAIL(\"START TIME\") values(%s)", "to_date('2019-08-25 22:11:11','yyyy-mm-dd hh24:mi:ss')"))
		//fmt.Println(r,err)
		//ctx,cancel:=context.WithTimeout(context.Background(),20*time.Second)
		//r,err:=db.ExecContext(ctx,sqlArr[i]["insert"]+",:1)",StartTimeArr[i])
		//cancel()
		Result, err := db.Exec((sqlArr)[i]["update"])
		//fmt.Println(Result.LastInsertId())
		//fmt.Println(Result.RowsAffected())
		//fmt.Println("===========", r, err)
		if err != nil {
			Log.Error("HtmlFile:%s ,Sql Exec Err:%s,,,%s", h.HtmlFileAbs, err, (sqlArr)[i]["update"])
			logstr := fmt.Sprintf("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "insert or update have err")
			h.ResultLog = logstr
			h.Fail = true
			continue
		}

		r, err := Result.RowsAffected()
		if err != nil {
			Log.Error("HtmlFile:%s ,Sql Exec Err:%s", h.HtmlFileAbs, err)
			logstr := fmt.Sprintf("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "insert or update have err")
			h.ResultLog = logstr
			h.Fail = true
			continue
		}

		if r == 0 {
			_, err := db.Exec((sqlArr)[i]["insert"])
			if err != nil {
				Log.Error("HtmlFile:%s ,Sql Exec Err:%s", h.HtmlFileAbs, err)
				logstr := fmt.Sprintf("htmlFile %s, ERR:%s\n", h.HtmlFileAbs, "insert or update have err")
				h.ResultLog = logstr
				h.Fail = true
				continue
			}
			insertnum = insertnum + 1
		} else {
			//Log.Warn("%+v\n", (sqlArr)[i]["update"])
			updatenum = updatenum + 1
		}

	}
	h.InsertSuccess = insertnum
	h.UpdateSuccess = updatenum
	//Log.Info("htmlfile : %s ,total sql:%d,success update sql:%d,insert sql:%d\n", filepath.Base(htmlfile), len(*sqlArr), updatenum, insertnum)
	return

}
